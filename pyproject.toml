[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "supersonic"
version = "0.1.0"
description = "Ultra-fast LLM fine-tuning with quantization built on TinyGrad"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [
    {name = "Daniel Ung", email = "daniel@supersonic.ai"}
]
maintainers = [
    {name = "Daniel Ung", email = "daniel@supersonic.ai"}
]
keywords = [
    "machine-learning",
    "deep-learning", 
    "llm",
    "quantization",
    "fine-tuning",
    "qlora",
    "lora",
    "tinygrad",
    "gpu-acceleration"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "tinygrad>=0.9.0",
    "numpy>=1.24.0",
    "pydantic>=2.0.0",
    "packaging>=23.0",
    "tqdm>=4.65.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
# Core ML dependencies for training
training = [
    "torch>=2.0.0",
    "transformers>=4.35.0",
    "datasets>=2.14.0",
    "accelerate>=0.21.0",
    "peft>=0.5.0",
    "evaluate>=0.4.0",
    "scikit-learn>=1.3.0",
]

# Data processing
data = [
    "pandas>=2.0.0",
    "datasets>=2.14.0",
    "sentencepiece>=0.1.99",
    "tokenizers>=0.15.0",
]

# Quantization backends
quantization = [
    "bitsandbytes>=0.41.0",
    "triton>=2.0.0; sys_platform != 'darwin'",
]

# Logging and monitoring
monitoring = [
    "wandb>=0.15.0",
    "tensorboard>=2.14.0",
    "gpustat>=1.1.0",
]

# Development tools
dev = [
    "pytest>=7.4.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
]

# Jupyter support
jupyter = [
    "jupyter>=1.0.0",
    "ipywidgets>=8.0.0",
    "matplotlib>=3.5.0",
]

# Full installation with all features
all = [
    "supersonic[training,data,quantization,monitoring,jupyter]",
    "flash-attn>=2.0.0; sys_platform == 'linux'",
]

# Minimal installation for inference only
minimal = [
    "tinygrad>=0.9.0",
    "numpy>=1.24.0",
    "transformers>=4.35.0",
    "torch>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/danielung/supersonic"
Documentation = "https://supersonic.readthedocs.io"
Repository = "https://github.com/danielung/supersonic"
"Bug Tracker" = "https://github.com/danielung/supersonic/issues"
Changelog = "https://github.com/danielung/supersonic/blob/main/CHANGELOG.md"

[project.scripts]
supersonic = "supersonic.cli:main"

[tool.setuptools]
packages = ["supersonic"]

[tool.setuptools.package-dir]
supersonic = "supersonic"

[tool.setuptools.package-data]
supersonic = ["py.typed", "*.pyi"]

# Black code formatting
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
known_first_party = ["supersonic"]
known_third_party = ["tinygrad", "torch", "transformers", "numpy"]

# pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "-ra",
    "--cov=supersonic",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests as requiring GPU",
    "integration: marks tests as integration tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# mypy type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "tinygrad.*",
    "triton.*",
    "bitsandbytes.*",
    "flash_attn.*",
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["supersonic"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@abstractmethod",
]

# Ruff linting (modern alternative to flake8)
[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
line-length = 88
target-version = "py38"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # imported but unused
"tests/*" = ["B011"]      # assert false warnings
